from flask import Flask, request, jsonify
import os
import logging
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://your-app-name.vercel.app')

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
if BOT_TOKEN and BOT_TOKEN != 'YOUR_BOT_TOKEN_HERE':
    application = Application.builder().token(BOT_TOKEN).build()
    
    def setup_handlers():
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("games", games_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CallbackQueryHandler(button_callback))
    
    async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = f"""
üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–≥—Ä–æ–≤–æ–π –ë–æ—Ç!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã:
‚ôî –®–∞—Ö–º–∞—Ç—ã - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ —Ç–∞–∫—Ç–∏–∫–∞
‚ö™ –®–∞—à–∫–∏ - –±—ã—Å—Ç—Ä–∞—è –∏ –¥–∏–Ω–∞–º–∏—á–Ω–∞—è –∏–≥—Ä–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/games - –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É
/help - –°–ø—Ä–∞–≤–∫–∞

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
        """
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã", web_app=WebAppInfo(url=f"{WEBAPP_URL}"))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    async def games_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /games"""
        games_text = """
üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:

‚ôî <b>–®–∞—Ö–º–∞—Ç—ã</b>
   ‚Ä¢ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
   ‚Ä¢ –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä
   ‚Ä¢ –®–∞—Ö –∏ –º–∞—Ç
   ‚Ä¢ –†–æ–∫–∏—Ä–æ–≤–∫–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ö–æ–¥—ã

‚ö™ <b>–®–∞—à–∫–∏</b>
   ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∏ –¥–∏–Ω–∞–º–∏—á–Ω–∞—è –∏–≥—Ä–∞
   ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è
   ‚Ä¢ –î–∞–º–∫–∏
   ‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∑—è—Ç–∏—è

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä–æ–≤—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!
        """
        
        keyboard = [
            [InlineKeyboardButton("‚ôî –®–∞—Ö–º–∞—Ç—ã", web_app=WebAppInfo(url=f"{WEBAPP_URL}?game=chess"))],
            [InlineKeyboardButton("‚ö™ –®–∞—à–∫–∏", web_app=WebAppInfo(url=f"{WEBAPP_URL}?game=checkers"))],
            [InlineKeyboardButton("üéÆ –í—Å–µ –∏–≥—Ä—ã", web_app=WebAppInfo(url=f"{WEBAPP_URL}"))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            games_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/games - –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üéÆ –ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã"
2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É (—à–∞—Ö–º–∞—Ç—ã –∏–ª–∏ —à–∞—à–∫–∏)
3. –ò–≥—Ä–∞–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ Telegram

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
        """
        
        await update.message.reply_text(help_text, parse_mode='HTML')
        
    async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫
        await query.edit_message_text("üéÆ –û—Ç–∫—Ä—ã–≤–∞—é –∏–≥—Ä–æ–≤—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É...")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setup_handlers()
else:
    application = None
    logger.warning("Bot token not configured!")

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook endpoint –¥–ª—è Telegram –±–æ—Ç–∞"""
    if not application:
        return jsonify({'error': 'Bot not configured'}), 400
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        update = Update.de_json(request.get_json(), application.bot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        application.process_update(update)
        
        return jsonify({'status': 'ok'}), 200
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/webhook/setup', methods=['GET'])
def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞"""
    if not application:
        return jsonify({'error': 'Bot not configured'}), 400
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è webhook
        webhook_url = f"{WEBAPP_URL}/api/webhook"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        result = application.bot.set_webhook(url=webhook_url)
        
        return jsonify({
            'status': 'ok',
            'webhook_url': webhook_url,
            'result': result
        }), 200
    except Exception as e:
        logger.error(f"Error setting webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/webhook/status', methods=['GET'])
def webhook_status():
    """–°—Ç–∞—Ç—É—Å webhook"""
    if not application:
        return jsonify({'error': 'Bot not configured'}), 400
    
    try:
        webhook_info = application.bot.get_webhook_info()
        return jsonify({
            'status': 'ok',
            'webhook_info': webhook_info.to_dict()
        }), 200
    except Exception as e:
        logger.error(f"Error getting webhook info: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/', methods=['GET'])
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return jsonify({
        'message': 'Telegram Bot Webhook API',
        'status': 'running',
        'bot_configured': bool(application),
        'webhook_url': f"{WEBAPP_URL}/api/webhook" if application else None
    })

# Export the Flask app for Vercel
app.debug = False 