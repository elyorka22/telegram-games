import random
from typing import Dict, List, Tuple
from game_data import QUIZ_QUESTIONS, WELCOME_MESSAGES, RESULT_MESSAGES

class QuizGame:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π-–≤–∏–∫—Ç–æ—Ä–∏–Ω–æ–π"""
    
    def __init__(self):
        self.active_games: Dict[int, Dict] = {}  # user_id -> game_state
        self.user_scores: Dict[int, int] = {}    # user_id -> total_score
    
    def start_game(self, user_id: int) -> Tuple[str, List[List]]:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        questions = QUIZ_QUESTIONS.copy()
        random.shuffle(questions)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        game_state = {
            'current_question': 0,
            'questions': questions,
            'score': 0,
            'answers': []
        }
        
        self.active_games[user_id] = game_state
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome = random.choice(WELCOME_MESSAGES)
        first_question = self._format_question(questions[0], 0)
        
        return welcome + "\n\n" + first_question, self._create_keyboard(questions[0])
    
    def process_answer(self, user_id: int, answer_index: int) -> Tuple[str, List[List], bool]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.active_games:
            return "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start", [], False
        
        game_state = self.active_games[user_id]
        current_q = game_state['current_question']
        question = game_state['questions'][current_q]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = answer_index == question['correct']
        if is_correct:
            game_state['score'] += 1
        
        game_state['answers'].append(answer_index)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        result_text = self._format_answer_result(question, is_correct, answer_index)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        game_state['current_question'] += 1
        
        if game_state['current_question'] >= len(game_state['questions']):
            # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
            return self._finish_game(user_id), [], True
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            next_question = self._format_question(
                game_state['questions'][game_state['current_question']], 
                game_state['current_question']
            )
            full_text = result_text + "\n\n" + next_question
            return full_text, self._create_keyboard(game_state['questions'][game_state['current_question']]), False
    
    def _format_question(self, question: Dict, question_num: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return f"‚ùì –í–æ–ø—Ä–æ—Å {question_num + 1}:\n{question['question']}"
    
    def _create_keyboard(self, question: Dict) -> List[List]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        from telegram import InlineKeyboardButton
        
        keyboard = []
        for i, option in enumerate(question['options']):
            keyboard.append([InlineKeyboardButton(option, callback_data=f"answer_{i}")])
        
        return keyboard
    
    def _format_answer_result(self, question: Dict, is_correct: bool, user_answer: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞"""
        if is_correct:
            result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        else:
            correct_answer = question['options'][question['correct']]
            result = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
        
        explanation = f"\nüí° {question['explanation']}"
        return result + explanation
    
    def _finish_game(self, user_id: int) -> str:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        game_state = self.active_games[user_id]
        score = game_state['score']
        total = len(game_state['questions'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_scores:
            self.user_scores[user_id] = 0
        self.user_scores[user_id] += score
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        percentage = (score / total) * 100
        if percentage == 100:
            category = "perfect"
        elif percentage >= 80:
            category = "good"
        elif percentage >= 60:
            category = "average"
        else:
            category = "poor"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        result_message = random.choice(RESULT_MESSAGES[category])
        
        final_text = f"""
üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!

üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total} ({percentage:.1f}%)
{result_message}

üéØ –û–±—â–∏–π —Å—á–µ—Ç: {self.user_scores[user_id]}

üîÑ –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start
        """.strip()
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∏–≥—Ä—É
        del self.active_games[user_id]
        
        return final_text
    
    def get_leaderboard(self) -> List[Tuple[int, int]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
        sorted_scores = sorted(self.user_scores.items(), key=lambda x: x[1], reverse=True)
        return sorted_scores[:10]  # –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤
    
    def get_user_stats(self, user_id: int) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        total_score = self.user_scores.get(user_id, 0)
        games_played = len([game for game in self.active_games.values() if game.get('user_id') == user_id])
        
        return {
            'total_score': total_score,
            'games_played': games_played,
            'current_game': user_id in self.active_games
        } 