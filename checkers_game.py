import json
from typing import Dict, List, Tuple, Optional
from enum import Enum

class CheckerColor(Enum):
    """–¶–≤–µ—Ç–∞ —à–∞—à–µ–∫"""
    WHITE = "white"
    BLACK = "black"

class CheckerType(Enum):
    """–¢–∏–ø—ã —à–∞—à–µ–∫"""
    MAN = "man"      # –û–±—ã—á–Ω–∞—è —à–∞—à–∫–∞
    KING = "king"    # –î–∞–º–∫–∞

class Checker:
    """–ö–ª–∞—Å—Å —à–∞—à–∫–∏"""
    
    def __init__(self, color: CheckerColor, position: Tuple[int, int]):
        self.color = color
        self.position = position
        self.type = CheckerType.MAN
        self.is_king = False
    
    def __str__(self):
        return f"{self.color.value}_{self.type.value}"
    
    def get_symbol(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª —à–∞—à–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if self.color == CheckerColor.WHITE:
            return "‚ö™" if self.type == CheckerType.MAN else "üëë"
        else:
            return "‚ö´" if self.type == CheckerType.MAN else "üëë"
    
    def promote_to_king(self):
        """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —à–∞—à–∫—É –≤ –¥–∞–º–∫—É"""
        self.type = CheckerType.KING
        self.is_king = True

class CheckersGame:
    """–ö–ª–∞—Å—Å –∏–≥—Ä—ã –≤ —à–∞—à–∫–∏"""
    
    def __init__(self, white_player_id: int, black_player_id: int):
        self.white_player_id = white_player_id
        self.black_player_id = black_player_id
        self.current_turn = CheckerColor.WHITE
        self.board = self._initialize_board()
        self.game_history = []
        self.game_over = False
        self.winner = None
        self.must_capture = False
        self.capture_chain = []
    
    def _initialize_board(self) -> List[List[Optional[Checker]]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É —à–∞—à–µ–∫"""
        board = [[None for _ in range(8)] for _ in range(8)]
        
        # –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —á–µ—Ä–Ω—ã–µ —à–∞—à–∫–∏ (–≤–µ—Ä—Ö–Ω–∏–µ 3 —Ä—è–¥–∞)
        for row in range(3):
            for col in range(8):
                if (row + col) % 2 == 1:  # –¢–æ–ª—å–∫–æ –Ω–∞ —á–µ—Ä–Ω—ã—Ö –∫–ª–µ—Ç–∫–∞—Ö
                    board[row][col] = Checker(CheckerColor.BLACK, (row, col))
        
        # –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –±–µ–ª—ã–µ —à–∞—à–∫–∏ (–Ω–∏–∂–Ω–∏–µ 3 —Ä—è–¥–∞)
        for row in range(5, 8):
            for col in range(8):
                if (row + col) % 2 == 1:  # –¢–æ–ª—å–∫–æ –Ω–∞ —á–µ—Ä–Ω—ã—Ö –∫–ª–µ—Ç–∫–∞—Ö
                    board[row][col] = Checker(CheckerColor.WHITE, (row, col))
        
        return board
    
    def get_board_display(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏"""
        display = "  a b c d e f g h\n"
        display += "  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        
        for row in range(8):
            display += f"{8-row} ‚îÇ"
            for col in range(8):
                checker = self.board[row][col]
                if checker:
                    display += f"{checker.get_symbol()}"
                else:
                    # –ß–µ—Ä–µ–¥—É–µ–º —Ü–≤–µ—Ç–∞ –∫–ª–µ—Ç–æ–∫
                    if (row + col) % 2 == 0:
                        display += "‚¨ú"
                    else:
                        display += "‚¨õ"
                display += "‚îÇ"
            display += f" {8-row}\n"
        
        display += "  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        display += "  a b c d e f g h\n"
        return display
    
    def is_valid_move(self, from_pos: Tuple[int, int], to_pos: Tuple[int, int]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ–¥ –¥–æ–ø—É—Å—Ç–∏–º—ã–º"""
        from_row, from_col = from_pos
        to_row, to_col = to_pos
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å–∫–∏
        if not (0 <= from_row < 8 and 0 <= from_col < 8 and 0 <= to_row < 8 and 0 <= to_col < 8):
            return False
        
        checker = self.board[from_row][from_col]
        if not checker:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫
        if checker.color != self.current_turn:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ —Ö–æ–¥–∏–º –Ω–∞ —Å–≤–æ—é —à–∞—à–∫—É
        target_checker = self.board[to_row][to_col]
        if target_checker and target_checker.color == checker.color:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ–¥–∏–º –Ω–∞ —á–µ—Ä–Ω—É—é –∫–ª–µ—Ç–∫—É
        if (to_row + to_col) % 2 == 0:
            return False
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∑—è—Ç–∏—è
        if self.must_capture:
            return self._is_valid_capture(from_pos, to_pos)
        
        # –û–±—ã—á–Ω—ã–π —Ö–æ–¥
        return self._is_valid_simple_move(from_pos, to_pos)
    
    def _is_valid_simple_move(self, from_pos: Tuple[int, int], to_pos: Tuple[int, int]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—ã—á–Ω—ã–π —Ö–æ–¥ (–±–µ–∑ –≤–∑—è—Ç–∏—è)"""
        from_row, from_col = from_pos
        to_row, to_col = to_pos
        checker = self.board[from_row][from_col]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–µ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—É—Å—Ç–∞
        if self.board[to_row][to_col]:
            return False
        
        row_diff = to_row - from_row
        col_diff = abs(to_col - from_col)
        
        if checker.type == CheckerType.MAN:
            # –û–±—ã—á–Ω–∞—è —à–∞—à–∫–∞ —Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≤–ø–µ—Ä–µ–¥ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É
            if checker.color == CheckerColor.WHITE:
                if row_diff != -1:  # –ë–µ–ª—ã–µ —Ö–æ–¥—è—Ç –≤–≤–µ—Ä—Ö
                    return False
            else:  # BLACK
                if row_diff != 1:   # –ß–µ—Ä–Ω—ã–µ —Ö–æ–¥—è—Ç –≤–Ω–∏–∑
                    return False
            
            return col_diff == 1
        
        else:  # KING
            # –î–∞–º–∫–∞ —Ö–æ–¥–∏—Ç –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –Ω–∞ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫
            if abs(row_diff) != abs(col_diff):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å —Å–≤–æ–±–æ–¥–µ–Ω
            return self._is_path_clear(from_pos, to_pos)
    
    def _is_valid_capture(self, from_pos: Tuple[int, int], to_pos: Tuple[int, int]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∑—è—Ç–∏–µ"""
        from_row, from_col = from_pos
        to_row, to_col = to_pos
        checker = self.board[from_row][from_col]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–µ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—É—Å—Ç–∞
        if self.board[to_row][to_col]:
            return False
        
        row_diff = to_row - from_row
        col_diff = to_col - from_col
        
        # –•–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
        if abs(row_diff) != abs(col_diff):
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º —à–∞—à–∫—É –¥–ª—è –≤–∑—è—Ç–∏—è
        mid_row = from_row + row_diff // 2
        mid_col = from_col + col_diff // 2
        captured_checker = self.board[mid_row][mid_col]
        
        if not captured_checker or captured_checker.color == checker.color:
            return False
        
        return True
    
    def _is_path_clear(self, from_pos: Tuple[int, int], to_pos: Tuple[int, int]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –ø—É—Ç—å –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        from_row, from_col = from_pos
        to_row, to_col = to_pos
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        row_step = 1 if to_row > from_row else -1
        col_step = 1 if to_col > from_col else -1
        
        current_row = from_row + row_step
        current_col = from_col + col_step
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –Ω–∞ –ø—É—Ç–∏ (–∫—Ä–æ–º–µ –∫–æ–Ω–µ—á–Ω–æ–π)
        while current_row != to_row and current_col != to_col:
            if self.board[current_row][current_col]:
                return False
            current_row += row_step
            current_col += col_step
        
        return True
    
    def get_valid_moves(self, position: Tuple[int, int]) -> List[Tuple[int, int]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è —à–∞—à–∫–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        valid_moves = []
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∑—è—Ç–∏—è
        if self.must_capture:
            for row in range(8):
                for col in range(8):
                    if self._is_valid_capture(position, (row, col)):
                        valid_moves.append((row, col))
        else:
            for row in range(8):
                for col in range(8):
                    if self.is_valid_move(position, (row, col)):
                        valid_moves.append((row, col))
        
        return valid_moves
    
    def get_all_captures(self, color: CheckerColor) -> List[Tuple[Tuple[int, int], List[Tuple[int, int]]]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∑—è—Ç–∏—è –¥–ª—è —Ü–≤–µ—Ç–∞"""
        captures = []
        
        for row in range(8):
            for col in range(8):
                checker = self.board[row][col]
                if checker and checker.color == color:
                    capture_moves = []
                    for to_row in range(8):
                        for to_col in range(8):
                            if self._is_valid_capture((row, col), (to_row, to_col)):
                                capture_moves.append((to_row, to_col))
                    
                    if capture_moves:
                        captures.append(((row, col), capture_moves))
        
        return captures
    
    def make_move(self, from_pos: Tuple[int, int], to_pos: Tuple[int, int]) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ö–æ–¥"""
        if not self.is_valid_move(from_pos, to_pos):
            return False
        
        from_row, from_col = from_pos
        to_row, to_col = to_pos
        checker = self.board[from_row][from_col]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ö–æ–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é
        move_info = {
            'checker': str(checker),
            'from': self._position_to_notation(from_pos),
            'to': self._position_to_notation(to_pos),
            'turn': self.current_turn.value
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–∑—è—Ç–∏–µ–º
        row_diff = to_row - from_row
        col_diff = to_col - from_col
        
        if abs(row_diff) == 2 and abs(col_diff) == 2:
            # –≠—Ç–æ –≤–∑—è—Ç–∏–µ
            mid_row = from_row + row_diff // 2
            mid_col = from_col + col_diff // 2
            captured_checker = self.board[mid_row][mid_col]
            
            move_info['captured'] = str(captured_checker)
            move_info['capture_pos'] = self._position_to_notation((mid_row, mid_col))
            
            # –£–¥–∞–ª—è–µ–º –≤–∑—è—Ç—É—é —à–∞—à–∫—É
            self.board[mid_row][mid_col] = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–∑—è—Ç–∏—è
            self.capture_chain.append((to_pos, from_pos))
            
        else:
            # –û–±—ã—á–Ω—ã–π —Ö–æ–¥
            self.capture_chain = []
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥
        self.board[to_row][to_col] = checker
        self.board[from_row][from_col] = None
        checker.position = to_pos
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –¥–∞–º–∫—É
        self._check_promotion(checker, to_pos)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–∑—è—Ç–∏—è
        if self.capture_chain:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–∞ —à–∞—à–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –±—Ä–∞—Ç—å
            if not self.get_all_captures(checker.color):
                # –ù–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–∑—è—Ç–∏—è - –º–µ–Ω—è–µ–º —Ö–æ–¥
                self.current_turn = CheckerColor.BLACK if self.current_turn == CheckerColor.WHITE else CheckerColor.WHITE
                self.capture_chain = []
        else:
            # –û–±—ã—á–Ω—ã–π —Ö–æ–¥ - –º–µ–Ω—è–µ–º —Ö–æ–¥
            self.current_turn = CheckerColor.BLACK if self.current_turn == CheckerColor.WHITE else CheckerColor.WHITE
        
        self.game_history.append(move_info)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        self._check_game_state()
        
        return True
    
    def _check_promotion(self, checker: Checker, position: Tuple[int, int]):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ —à–∞—à–∫–∏ –≤ –¥–∞–º–∫—É"""
        row, col = position
        
        if checker.color == CheckerColor.WHITE and row == 0:
            checker.promote_to_king()
        elif checker.color == CheckerColor.BLACK and row == 7:
            checker.promote_to_king()
    
    def _check_game_state(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è
        self.must_capture = len(self.get_all_captures(self.current_turn)) > 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
        has_moves = False
        for row in range(8):
            for col in range(8):
                checker = self.board[row][col]
                if checker and checker.color == self.current_turn:
                    if self.get_valid_moves((row, col)):
                        has_moves = True
                        break
            if has_moves:
                break
        
        if not has_moves:
            self.game_over = True
            self.winner = CheckerColor.BLACK if self.current_turn == CheckerColor.WHITE else CheckerColor.WHITE
    
    def _position_to_notation(self, pos: Tuple[int, int]) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–æ–∑–∏—Ü–∏—é –≤ –Ω–æ—Ç–∞—Ü–∏—é"""
        row, col = pos
        return f"{chr(97 + col)}{8 - row}"
    
    def get_game_status(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã"""
        if self.game_over:
            winner_name = "–ë–µ–ª—ã–µ" if self.winner == CheckerColor.WHITE else "–ß–µ—Ä–Ω—ã–µ"
            return f"üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! {winner_name} –ø–æ–±–µ–¥–∏–ª–∏!"
        elif self.must_capture:
            current_player = "–ë–µ–ª—ã–µ" if self.current_turn == CheckerColor.WHITE else "–ß–µ—Ä–Ω—ã–µ"
            return f"‚ö° –•–æ–¥ {current_player} (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –≤–∑—è—Ç–∏–µ)"
        else:
            current_player = "–ë–µ–ª—ã–µ" if self.current_turn == CheckerColor.WHITE else "–ß–µ—Ä–Ω—ã–µ"
            return f"üéØ –•–æ–¥ {current_player}"
        
        return "üéÆ –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è"
    
    def get_game_summary(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –∏–≥—Ä—ã"""
        return {
            'white_player': self.white_player_id,
            'black_player': self.black_player_id,
            'current_turn': self.current_turn.value,
            'game_over': self.game_over,
            'winner': self.winner.value if self.winner else None,
            'must_capture': self.must_capture,
            'moves_count': len(self.game_history),
            'status': self.get_game_status()
        } 