import os
import logging
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from flask import Flask, render_template
import threading
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Railway
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'http://localhost:5000')
PORT = int(os.getenv('PORT', 5000))
HOST = os.getenv('HOST', '0.0.0.0')
LOBBY_API_BASE = f"{WEBAPP_URL}/api/lobby"

class TelegramGameBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("games", self.games_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("join", self.join_game_command))
        self.application.add_handler(CommandHandler("lobby", self.lobby_command))
        self.application.add_handler(CommandHandler("mygame", self.my_game_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = f"""
üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–≥—Ä–æ–≤–æ–π –ë–æ—Ç!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã:
‚ôî –®–∞—Ö–º–∞—Ç—ã - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ —Ç–∞–∫—Ç–∏–∫–∞
‚ö™ –®–∞—à–∫–∏ - –±—ã—Å—Ç—Ä–∞—è –∏ –¥–∏–Ω–∞–º–∏—á–Ω–∞—è –∏–≥—Ä–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/games  ‚Äî –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É –∏ —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏
/lobby  ‚Äî –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ª–æ–±–±–∏ –∏ –±—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥
/join ID ‚Äî –í–æ–π—Ç–∏ –ø–æ ID –∏–≥—Ä—ã
/mygame ‚Äî –ú–æ—è —Ç–µ–∫—É—â–∞—è –∏–≥—Ä–∞
/help  ‚Äî –°–ø—Ä–∞–≤–∫–∞

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
        """
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã", web_app=WebAppInfo(url=f"{WEBAPP_URL}"))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    async def games_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /games"""
        games_text = """
üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:

‚ôî <b>–®–∞—Ö–º–∞—Ç—ã</b>
   ‚Ä¢ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
   ‚Ä¢ –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä
   ‚Ä¢ –®–∞—Ö –∏ –º–∞—Ç
   ‚Ä¢ –†–æ–∫–∏—Ä–æ–≤–∫–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ö–æ–¥—ã

‚ö™ <b>–®–∞—à–∫–∏</b>
   ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∏ –¥–∏–Ω–∞–º–∏—á–Ω–∞—è –∏–≥—Ä–∞
   ‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∑—è—Ç–∏—è
   ‚Ä¢ –î–∞–º–∫–∏
   ‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∑—è—Ç–∏—è

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–≥—Ä–æ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!
        """
        
        keyboard = [
            [InlineKeyboardButton("‚ôî –°–æ–∑–¥–∞—Ç—å —à–∞—Ö–º–∞—Ç—ã", callback_data="create_chess")],
            [InlineKeyboardButton("‚ö™ –°–æ–∑–¥–∞—Ç—å —à–∞—à–∫–∏", callback_data="create_checkers")],
            [InlineKeyboardButton("üéÆ –û—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}"))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            games_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–≥—Ä–∞–º</b>

<b>‚ôî –®–∞—Ö–º–∞—Ç—ã:</b>
‚Ä¢ –¶–µ–ª—å: –ø–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ç –∫–æ—Ä–æ–ª—é –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
‚Ä¢ –ü–µ—à–∫–∞: —Ö–æ–¥–∏—Ç –Ω–∞ 1 –∫–ª–µ—Ç–∫—É –≤–ø–µ—Ä–µ–¥, –±—å–µ—Ç –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
‚Ä¢ –õ–∞–¥—å—è: —Ö–æ–¥–∏—Ç –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
‚Ä¢ –ö–æ–Ω—å: —Ö–æ–¥–∏—Ç –±—É–∫–≤–æ–π "–ì"
‚Ä¢ –°–ª–æ–Ω: —Ö–æ–¥–∏—Ç –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
‚Ä¢ –§–µ—Ä–∑—å: —Ö–æ–¥–∏—Ç –∫–∞–∫ –ª–∞–¥—å—è + —Å–ª–æ–Ω
‚Ä¢ –ö–æ—Ä–æ–ª—å: —Ö–æ–¥–∏—Ç –Ω–∞ 1 –∫–ª–µ—Ç–∫—É –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏

<b>‚ö™ –®–∞—à–∫–∏:</b>
‚Ä¢ –¶–µ–ª—å: –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –≤—Å–µ —à–∞—à–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
‚Ä¢ –û–±—ã—á–Ω–∞—è —à–∞—à–∫–∞: —Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≤–ø–µ—Ä–µ–¥ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
‚Ä¢ –í–∑—è—Ç–∏–µ: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
‚Ä¢ –î–∞–º–∫–∞: –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
‚Ä¢ –î–∞–º–∫–∞: —Ö–æ–¥–∏—Ç –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –Ω–∞ –ª—é–±–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ

<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/games - –í—ã–±–æ—Ä –∏–≥—Ä—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã (—à–∞—Ö–º–∞—Ç—ã –∏–ª–∏ —à–∞—à–∫–∏)
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
4. –ò–≥—Ä–∞–π—Ç–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!

–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üéÆ
        """
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}"))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä
        if query.data == "create_chess":
            await self.create_game_direct(update, context, "chess")
        elif query.data == "create_checkers":
            await self.create_game_direct(update, context, "checkers")
        elif query.data and query.data.startswith('join_game_'):
            game_id = query.data.replace('join_game_', '')
            await self.join_game_via_callback(query, game_id)
        elif query.data and query.data.startswith('share_game_'):
            game_id = query.data.replace('share_game_', '')
            await query.edit_message_text(
                f"üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –≤ –∏–≥—Ä—É!\n\n"
                f"üÜî ID: <code>{game_id}</code>\n"
                f"–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –∏–∑ WebApp: {WEBAPP_URL}/game?game_id={game_id}",
                parse_mode='HTML'
            )
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App
        elif query.data and query.data.startswith('web_app_data'):
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑ Mini App
            await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç –∏–≥—Ä—ã!")
    
    async def create_game_direct(self, update: Update, context: ContextTypes.DEFAULT_TYPE, game_type: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ"""
        user = update.effective_user
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ API
            import requests
            import json
            
            game_data = {
                'user_id': str(user.id),
                'username': user.username or user.first_name or 'Player',
                'game_type': game_type
            }
            
            response = requests.post(
                f"{LOBBY_API_BASE}/create",
                headers={'Content-Type': 'application/json'},
                json=game_data,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data['status'] == 'ok':
                    game_id = data['game']['id']
                    game_name = "—à–∞—Ö–º–∞—Ç—ã" if game_type == "chess" else "—à–∞—à–∫–∏"
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ
                    keyboard = [
                        [InlineKeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", web_app=WebAppInfo(url=f"{WEBAPP_URL}/game?game_id={game_id}&type={game_type}"))],
                        [InlineKeyboardButton("üìã –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", callback_data=f"share_game_{game_id}")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.edit_message_text(
                        f"‚úÖ –ò–≥—Ä–∞ –≤ {game_name} —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                        f"üÜî ID –∏–≥—Ä—ã: <code>{game_id}</code>\n"
                        f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {user.first_name}\n"
                        f"‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞\n\n"
                        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–≥—Ä—ã –¥—Ä—É–≥—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!",
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
                else:
                    await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
                
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def join_game_via_callback(self, query, game_id: str):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ –∏–∑ –∫–Ω–æ–ø–∫–∏ –≤ —Å–ø–∏—Å–∫–µ –ª–æ–±–±–∏"""
        import requests
        user = query.from_user
        try:
            payload = {
                'user_id': str(user.id),
                'username': user.username or user.first_name or 'Player',
                'game_id': game_id
            }
            response = requests.post(
                f"{LOBBY_API_BASE}/join",
                headers={'Content-Type': 'application/json'},
                json=payload,
                timeout=10
            )
            if response.status_code == 200:
                data = response.json()
                if data.get('status') == 'ok':
                    game_type = data['game']['type']
                    keyboard = [
                        [InlineKeyboardButton("üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}/game?game_id={game_id}&type={game_type}"))]
                    ]
                    await query.edit_message_text(
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!\n\nüÜî <code>{game_id}</code>",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='HTML'
                    )
                else:
                    await query.edit_message_text(f"‚ùå {data.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è')}")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def join_game_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ –ø–æ ID"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID –∏–≥—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–µ
        if not context.args:
            await update.message.reply_text(
                "üéÆ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/join GAME_ID</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/join abc12345</code>\n\n"
                "–ü–æ–ª—É—á–∏—Ç–µ ID –∏–≥—Ä—ã –æ—Ç –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª –∏–≥—Ä—É!",
                parse_mode='HTML'
            )
            return
        
        game_id = context.args[0]
        
        try:
            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∏–≥—Ä–µ —á–µ—Ä–µ–∑ API
            import requests
            
            join_data = {
                'user_id': str(user.id),
                'username': user.username or user.first_name or 'Player',
                'game_id': game_id
            }
            
            response = requests.post(
                f"{LOBBY_API_BASE}/join",
                headers={'Content-Type': 'application/json'},
                json=join_data,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data['status'] == 'ok':
                    game_type = data['game']['type']
                    game_name = "—à–∞—Ö–º–∞—Ç—ã" if game_type == "chess" else "—à–∞—à–∫–∏"
                    
                    if data['game']['status'] == 'playing':
                        # –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞—á–∞–ª—É
                        keyboard = [
                            [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É!", web_app=WebAppInfo(url=f"{WEBAPP_URL}/game?game_id={game_id}&type={game_type}"))]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        await update.message.reply_text(
                            f"üéâ <b>–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!</b>\n\n"
                            f"üéÆ –¢–∏–ø: {game_name}\n"
                            f"üÜî ID: <code>{game_id}</code>\n"
                            f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(data['game']['players'])}/2\n\n"
                            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!",
                            reply_markup=reply_markup,
                            parse_mode='HTML'
                        )
                    else:
                        # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                        await update.message.reply_text(
                            f"‚úÖ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!</b>\n\n"
                            f"üéÆ –¢–∏–ø: {game_name}\n"
                            f"üÜî ID: <code>{game_id}</code>\n"
                            f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(data['game']['players'])}/2\n"
                            f"‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞\n\n"
                            f"–í—ã –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã, –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è!",
                            parse_mode='HTML'
                        )
                else:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def lobby_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏–≥—Ä –∏ –¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞"""
        import requests
        try:
            resp = requests.get(f"{LOBBY_API_BASE}/games", timeout=10)
            if resp.status_code != 200:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä")
                return
            data = resp.json()
            games = data.get('games', [])
            if not games:
                await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏–≥—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /games —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏.")
                return
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∏–≥—Ä
            rows = []
            for game in games[:10]:
                gid = game['id']
                gtype = '—à–∞—Ö–º–∞—Ç—ã' if game['type'] == 'chess' else '—à–∞—à–∫–∏'
                text = f"{gtype} ‚Ä¢ {game['players_count']}/{game['max_players']} ‚Ä¢ {game['creator']}"
                rows.append([InlineKeyboardButton(text, callback_data=f"join_game_{gid}")])
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(rows)
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def my_game_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Ö–æ–¥–∞"""
        import requests
        user = update.effective_user
        try:
            resp = requests.get(f"{LOBBY_API_BASE}/user/{user.id}", timeout=10)
            if resp.status_code != 200:
                await update.message.reply_text("–ò–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —á–µ—Ä–µ–∑ /games")
                return
            data = resp.json()
            game = data.get('game')
            if not game:
                await update.message.reply_text("–ò–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —á–µ—Ä–µ–∑ /games")
                return
            game_id = game['id']
            game_type = game['type']
            status = game['status']
            gname = '—à–∞—Ö–º–∞—Ç—ã' if game_type == 'chess' else '—à–∞—à–∫–∏'
            keyboard = [
                [InlineKeyboardButton("üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}/game?game_id={game_id}&type={game_type}"))]
            ]
            await update.message.reply_text(
                f"üéÆ –í–∞—à–∞ –∏–≥—Ä–∞: {gname}\nüÜî <code>{game_id}</code>\n‚è≥ –°—Ç–∞—Ç—É—Å: {status}",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def run_flask_app():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    from app import app, socketio
    socketio.run(app, debug=False, host=HOST, port=PORT, allow_unsafe_werkzeug=True)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ {HOST}:{PORT}")
    logger.info(f"WebApp URL: {WEBAPP_URL}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask_app, daemon=True)
    flask_thread.start()
    
    # –î–∞–µ–º –≤—Ä–µ–º—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    time.sleep(3)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    bot = TelegramGameBot()
    bot.run()

if __name__ == '__main__':
    main() 