import logging
from telegram import Update, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import BOT_TOKEN, BOT_NAME
from game_logic import QuizGame

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã
quiz_game = QuizGame()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    welcome_text = f"""
üéÆ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–Ø {BOT_NAME} - –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!

üìö –£ –º–µ–Ω—è –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã.
üéØ –û—Ç–≤–µ—á–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –Ω–∞–±–∏—Ä–∞–π—Ç–µ –æ—á–∫–∏!
üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/leaderboard - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
/help - –ü–æ–º–æ—â—å

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!
    """.strip()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    from telegram import InlineKeyboardButton
    keyboard = [[InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ –ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ

üéÆ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:
1. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start
2. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–∏—Ä–∞—è –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
3. –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∞–µ—Ç–µ 1 –æ—á–∫–æ
4. –í –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã —É–≤–∏–¥–∏—Ç–µ —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í–∞—à –æ–±—â–∏–π —Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /leaderboard –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤

üéØ –°–æ–≤–µ—Ç—ã:
‚Ä¢ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å —Å –æ—Ç–≤–µ—Ç–∞–º–∏
‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º

–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üçÄ
    """.strip()
    
    await update.message.reply_text(help_text)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_id = update.effective_user.id
    stats = quiz_game.get_user_stats(user_id)
    
    stats_text = f"""
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.first_name}
üéØ –û–±—â–∏–π —Å—á–µ—Ç: {stats['total_score']} –æ—á–∫–æ–≤
üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {stats['games_played']}
üé≤ –¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞: {'–î–∞' if stats['current_game'] else '–ù–µ—Ç'}

üèÜ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {quiz_game.get_leaderboard().index((user_id, stats['total_score'])) + 1 if (user_id, stats['total_score']) in quiz_game.get_leaderboard() else '–ù–µ –≤ —Ç–æ–ø–µ'}
    """.strip()
    
    await update.message.reply_text(stats_text)

async def leaderboard_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /leaderboard"""
    leaderboard = quiz_game.get_leaderboard()
    
    if not leaderboard:
        await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤. –°—ã–≥—Ä–∞–π—Ç–µ –≤ –∏–≥—Ä—É!")
        return
    
    leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n\n"
    
    for i, (user_id, score) in enumerate(leaderboard, 1):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try:
            user = await context.bot.get_chat(user_id)
            username = user.first_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        except:
            username = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        leaderboard_text += f"{medal} {username}: {score} –æ—á–∫–æ–≤\n"
    
    await update.message.reply_text(leaderboard_text)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
    
    user_id = query.from_user.id
    
    if query.data == "start_game":
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        text, keyboard = quiz_game.start_game(user_id)
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    
    elif query.data.startswith("answer_"):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        answer_index = int(query.data.split("_")[1])
        text, keyboard, is_finished = quiz_game.process_answer(user_id, answer_index)
        
        if is_finished:
            # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await query.edit_message_text(text=text)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=text, reply_markup=reply_markup)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("leaderboard", leaderboard_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info(f"–ë–æ—Ç {BOT_NAME} –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 