#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é –≤ Railway
"""

import os
import sys
import importlib.util

def check_file_exists(filename, description):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    if os.path.exists(filename):
        print(f"‚úÖ {description}: {filename}")
        return True
    else:
        print(f"‚ùå {description}: {filename} - –ù–ï –ù–ê–ô–î–ï–ù")
        return False

def check_import(module_name, description):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è"""
    try:
        importlib.import_module(module_name)
        print(f"‚úÖ {description}: {module_name}")
        return True
    except ImportError:
        print(f"‚ùå {description}: {module_name} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
        return False

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ requirements.txt"""
    if not check_file_exists('requirements.txt', '–§–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π'):
        return False
    
    try:
        with open('requirements.txt', 'r') as f:
            requirements = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        essential_deps = [
            'Flask',
            'python-telegram-bot',
            'flask-socketio',
            'python-dotenv'
        ]
        
        missing_deps = []
        for dep in essential_deps:
            if dep.lower() not in requirements.lower():
                missing_deps.append(dep)
        
        if missing_deps:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_deps)}")
            return False
        else:
            print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è requirements.txt: {e}")
        return False

def check_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    config_files = [
        ('railway.json', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Railway'),
        ('Procfile', 'Procfile –¥–ª—è Railway'),
        ('runtime.txt', '–í–µ—Ä—Å–∏—è Python'),
        ('env.example', '–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    ]
    
    all_good = True
    for filename, description in config_files:
        if not check_file_exists(filename, description):
            all_good = False
    
    return all_good

def check_main_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    main_files = [
        ('telegram_bot.py', '–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞'),
        ('app.py', 'Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'),
        ('chess_game.py', '–õ–æ–≥–∏–∫–∞ —à–∞—Ö–º–∞—Ç'),
        ('checkers_game.py', '–õ–æ–≥–∏–∫–∞ —à–∞—à–µ–∫')
    ]
    
    all_good = True
    for filename, description in main_files:
        if not check_file_exists(filename, description):
            all_good = False
    
    return all_good

def check_templates():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
    template_files = [
        ('templates/index.html', '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'),
        ('templates/game.html', '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–≥—Ä—ã')
    ]
    
    all_good = True
    for filename, description in template_files:
        if not check_file_exists(filename, description):
            all_good = False
    
    return all_good

def check_static_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    static_dirs = [
        ('static/css', 'CSS —Ñ–∞–π–ª—ã'),
        ('static/js', 'JavaScript —Ñ–∞–π–ª—ã')
    ]
    
    all_good = True
    for dirname, description in static_dirs:
        if os.path.exists(dirname) and os.path.isdir(dirname):
            print(f"‚úÖ {description}: {dirname}")
        else:
            print(f"‚ùå {description}: {dirname} - –ù–ï –ù–ê–ô–î–ï–ù")
            all_good = False
    
    return all_good

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –¥–µ–ø–ª–æ—é –≤ Railway")
    print("=" * 50)
    
    checks = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", check_configuration),
        ("–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", check_main_files),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_requirements),
        ("–®–∞–±–ª–æ–Ω—ã", check_templates),
        ("–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã", check_static_files)
    ]
    
    all_passed = True
    for check_name, check_func in checks:
        print(f"\nüìã {check_name}:")
        if not check_func():
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é.")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ Railway")
        print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        print("4. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        print("\nüìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: DEPLOYMENT.md")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.")
        sys.exit(1)

if __name__ == '__main__':
    main() 